import re
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.database.session import async_session
from nobrain_bot.database.CRUD.order_crud import update_order_status, get_order_by_id
from nobrain_bot.features.common.keyboards.main_menu import main_menu_kb
from nobrain_bot.features.order.states import DeclineStates, EditStates
from nobrain_bot.features.order.keyboards.desicions import client_confirm_kb


router = Router(name="admin_orders")


# ========================
# ‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
# ========================
@router.callback_query(F.data.startswith("accept:"))
async def accept_order(callback: CallbackQuery, bot: Bot):
    order_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        order = await update_order_status(session, order_id, status="accepted")

    await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç.")
    # –∫–ª–∏–µ–Ω—Ç—É –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –º–µ–Ω—é
    await bot.send_message(
        order.tg_user_id,
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n"
        "üöÄ –û—Ç–ª–∏—á–Ω–æ, –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏. –° –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üì±",
    )
    await bot.send_message(
        order.tg_user_id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá\n\nP.S –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –±–ª–æ–≥! üòâ",
        reply_markup=main_menu_kb()
    )


# ========================
# ‚ùå –û—Ç–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑–∞
# ========================
@router.callback_query(F.data.startswith("decline:"))
async def decline_order_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id)
    await callback.message.answer("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
    await state.set_state(DeclineStates.WaitingReason)


@router.message(F.text, DeclineStates.WaitingReason)
async def decline_order_finish(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    order_id = data["order_id"]
    reason = message.text.strip()

    async with async_session() as session:
        order = await update_order_status(session, order_id, status="declined", decline_reason=reason)

    await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await bot.send_message(order.tg_user_id, f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    await state.clear()


# ========================
# ‚úèÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—è–µ—Ç —É—Å–ª–æ–≤–∏—è
# ========================
@router.callback_query(F.data.startswith("edit:"))
async def edit_order_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id)
    await callback.message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 - 10.01.2025")
    await state.set_state(EditStates.WaitingDates)


@router.message(F.text, EditStates.WaitingDates)
async def edit_order_dates(message: Message, state: FSMContext):
    text = message.text.strip()
    match = re.match(r"(\d{2}\.\d{2}\.\d{4})\s*-\s*(\d{2}\.\d{2}\.\d{4})", text)
    if not match:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ: 01.01.2025 - 10.01.2025")
        return

    try:
        start_date = datetime.strptime(match.group(1), "%d.%m.%Y")
        end_date = datetime.strptime(match.group(2), "%d.%m.%Y")
        if end_date <= start_date:
            raise ValueError("end before start")
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–∞—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω–µ—Ü –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞.")
        return

    await state.update_data(start_date=start_date, end_date=end_date)
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(EditStates.WaitingBudget)


@router.message(F.text, EditStates.WaitingBudget)
async def edit_order_budget(message: Message, state: FSMContext):
    text = message.text.strip().replace(" ", "")
    if not text.isdigit():
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–∏–º–µ—Ä: 50000")
        return

    budget = int(text)
    await state.update_data(budget=budget)
    await message.answer("üñä –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ—á–µ–º—É –º–µ–Ω—è—é—Ç—Å—è —Å—Ä–æ–∫–∏ –∏–ª–∏ —Å—É–º–º–∞):")
    await state.set_state(EditStates.WaitingComment)


@router.message(F.text, EditStates.WaitingComment)
async def edit_order_comment(message: Message, state: FSMContext, bot: Bot):
    comment = message.text.strip()
    data = await state.get_data()
    order_id = data["order_id"]
    start_date, end_date = data["start_date"], data["end_date"]
    budget = data["budget"]

    async with async_session() as session:
        order = await get_order_by_id(session, order_id)

    await bot.send_message(
        order.tg_user_id,
        f"üìë –ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É #{order_id}:\n\n"
        f"–°—Ä–æ–∫–∏: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {budget:,} ‚ÇΩ\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {comment}\n\n"
        "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã?",
        reply_markup=client_confirm_kb(order_id)
    )

    await message.answer(f"‚úèÔ∏è –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")
    await state.clear()
