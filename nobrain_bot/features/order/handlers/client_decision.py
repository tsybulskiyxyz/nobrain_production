import re
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.database.session import async_session
from nobrain_bot.database.CRUD.order_crud import update_order_status
from nobrain_bot.core.config import get_settings
from nobrain_bot.features.common.keyboards.main_menu import main_menu_kb
from nobrain_bot.features.order.states import ClientEditStates
from nobrain_bot.features.order.keyboards.desicions import admin_confirm_kb


router = Router(name="client_orders")
config = get_settings()


# ========================
# üë§ –ö–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è
# ========================
@router.callback_query(F.data.startswith("client_accept:"))
async def client_accept(callback: CallbackQuery, bot: Bot):
    order_id = int(callback.data.split(":")[1])

    async with async_session() as session:
        await update_order_status(session, order_id, status="accepted")

    await callback.message.edit_text(
        "‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏!\n\n"
        "üöÄ –û—Ç–ª–∏—á–Ω–æ, –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º.\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏. –° –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–æ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üòâ",
    )
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá",
        reply_markup=main_menu_kb()
    )
    await bot.send_message(config.admin_id, f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}.")


# ========================
# ‚úèÔ∏è –ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
# ========================
@router.callback_query(F.data.startswith("client_edit:"))
async def client_edit_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id)
    await callback.message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Å—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 - 10.01.2025")
    await state.set_state(ClientEditStates.WaitingDates)


@router.message(F.text, ClientEditStates.WaitingDates)
async def client_edit_dates(message: Message, state: FSMContext):
    text = message.text.strip()
    match = re.match(r"(\d{2}\.\d{2}\.\d{4})\s*-\s*(\d{2}\.\d{2}\.\d{4})", text)
    if not match:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ: 01.01.2025 - 10.01.2025")
        return

    try:
        start_date = datetime.strptime(match.group(1), "%d.%m.%Y")
        end_date = datetime.strptime(match.group(2), "%d.%m.%Y")
        if end_date <= start_date:
            raise ValueError("end before start")
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–∞—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω–µ—Ü –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞.")
        return

    await state.update_data(start_date=start_date, end_date=end_date)
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(ClientEditStates.WaitingBudget)


@router.message(F.text, ClientEditStates.WaitingBudget)
async def client_edit_budget(message: Message, state: FSMContext, bot: Bot):
    text = message.text.strip().replace(" ", "")
    if not text.isdigit():
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤. –ü—Ä–∏–º–µ—Ä: 50000")
        return

    budget = int(text)
    data = await state.get_data()
    order_id = data["order_id"]
    start_date, end_date = data["start_date"], data["end_date"]

    await bot.send_message(
        config.admin_id,
        f"üîÑ –ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –∑–∞–∫–∞–∑—É #{order_id}:\n"
        f"–°—Ä–æ–∫–∏: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
        f"–ë—é–¥–∂–µ—Ç: {budget:,} ‚ÇΩ",
        reply_markup=admin_confirm_kb(order_id)
    )

    await message.answer(
        "‚úèÔ∏è –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
        ""
    )
    await state.clear()
