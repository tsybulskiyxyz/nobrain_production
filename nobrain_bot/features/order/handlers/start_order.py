from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.keyboards.services import services_kb


router = Router(name="order_start")


@router.message(F.text == 'üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def start_order(message: Message, state: FSMContext):
    # –æ—á–∏—â–∞–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    await state.clear()
    await state.update_data(
        selected_services=set(),
        base_answers={},
        details={},
        completed_blocks=set()
    )
    await message.answer(
        "üìù –î–∞–≤–∞–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª—É–≥:",
        reply_markup=services_kb(set())
    )
    await state.set_state(OrderStates.ChoosingServices)


@router.callback_query(F.data.startswith("service:"), OrderStates.ChoosingServices)
async def choose_services(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = set(data.get("selected_services", set()))
    _, payload = callback.data.split(":", 1)

    if payload == "continue":
        if not selected:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É", show_alert=True)
            return
        await callback.message.edit_text("üíº –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –≤–∫—Ä–∞—Ç—Ü–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ:")
        await state.set_state(OrderStates.Base_About)
        return

    if payload in selected:
        selected.remove(payload)
    else:
        selected.add(payload)
    await state.update_data(selected_services=selected)
    await callback.message.edit_reply_markup(reply_markup=services_kb(selected))
    await callback.answer()
