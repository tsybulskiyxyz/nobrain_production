from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.utils import go_to_next_service_block

router = Router(name="order_bot")


@router.message(OrderStates.Bot_Type)
async def bot_type(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["type"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "‚öôÔ∏è –î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –±–æ—Ç? –ß—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –¥–µ–ª–∞—Ç—å?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã, –≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏"
    )
    await state.set_state(OrderStates.Bot_Functionality)


@router.message(OrderStates.Bot_Functionality)
async def bot_functionality(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["functionality"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üí≥ –ù—É–∂–Ω–æ –ª–∏, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–ª –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É?\n\n"
        "–ï—Å–ª–∏ –¥–∞ ‚Äî —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å–ø–æ—Å–æ–±: YooKassa, –°–ë–ü –∏ —Ç.–¥.)."
    )
    await state.set_state(OrderStates.Bot_Payment)


@router.message(OrderStates.Bot_Payment)
async def bot_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["payment"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üì© –ö—É–¥–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞—è–≤–∫–∏ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –±–æ—Ç–∞?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ç–æ–ª—å–∫–æ –≤–∞–º, –≤ –æ–±—â–∏–π —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã, —Ä–∞–∑–Ω—ã–º –ª—é–¥—è–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–æ–≤—Å–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    await state.set_state(OrderStates.Bot_Notifications)


@router.message(OrderStates.Bot_Notifications)
async def bot_notifications(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["access"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üîó –ù—É–∂–Ω—ã –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏?\n\n"
        "Google Sheets, Email, Google Calendar –∏ —Ç.–¥."
    )
    await state.set_state(OrderStates.Bot_Integrations)


@router.message(OrderStates.Bot_Integrations)
async def bot_integrations(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["integrations"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üì∑ –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è? –ú–æ–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.\n\n"
        '–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç".'
    )
    await state.set_state(OrderStates.Bot_Refs)


@router.message(OrderStates.Bot_Refs)
async def bot_refs(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["refs"] = (message.text or "").strip()

    completed = set(data.get("completed_blocks", set()))
    completed.add("bot")

    await state.update_data(details=details, completed_blocks=completed)
    await go_to_next_service_block(message, state)
