import re
from datetime import datetime, date
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.utils import go_to_next_service_block


router = Router(name="order_base")


@router.message(OrderStates.Base_About)
async def base_about(message: Message, state: FSMContext):
    data = await state.get_data()
    base = data.get("base_answers", {})
    base["about"] = message.text.strip()
    await state.update_data(base_answers=base)
    await message.answer("üë• –ö—Ç–æ –≤–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?")
    await state.set_state(OrderStates.Base_Audience)


@router.message(OrderStates.Base_Audience)
async def base_audience(message: Message, state: FSMContext):
    data = await state.get_data()
    base = data.get("base_answers", {})
    base["audience"] = message.text.strip()
    await state.update_data(base_answers=base)
    await message.answer("üéØ –ö–∞–∫–∞—è —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞?")
    await state.set_state(OrderStates.Base_Goal)


@router.message(OrderStates.Base_Goal)
async def base_goal(message: Message, state: FSMContext):
    data = await state.get_data()
    base = data.get("base_answers", {})
    base["goal"] = message.text.strip()
    await state.update_data(base_answers=base)
    await message.answer("‚è± –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 - 10.01.2025")
    await state.set_state(OrderStates.Base_Timing)


@router.message(OrderStates.Base_Timing)
async def base_timing(message: Message, state: FSMContext):
    text = message.text.strip()
    match = re.match(r"(\d{2}\.\d{2}\.\d{4})\s*-\s*(\d{2}\.\d{2}\.\d{4})", text)
    if not match:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 - 10.01.2025")
        return

    try:
        start_date = datetime.strptime(match.group(1), "%d.%m.%Y").date()
        end_date = datetime.strptime(match.group(2), "%d.%m.%Y").date()
        today = date.today()

        if start_date < today:
            await message.answer("‚ö†Ô∏è –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏.")
            return
        if end_date <= start_date:
            await message.answer("‚ö†Ô∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")
            return
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.01.2025 - 10.01.2025")
        return

    data = await state.get_data()
    base = data.get("base_answers", {})
    base["timing"] = {
        "start": start_date.strftime("%d.%m.%Y"),
        "end": end_date.strftime("%d.%m.%Y")
    }
    await state.update_data(base_answers=base)

    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(OrderStates.Base_Budget)


@router.message(OrderStates.Base_Budget)
async def base_budget(message: Message, state: FSMContext):
    text = message.text.strip().replace(" ", "")
    if not text.isdigit():
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 50000")
        return

    budget = int(text)
    if budget <= 0:
        await message.answer("‚ö†Ô∏è –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    data = await state.get_data()
    base = data.get("base_answers", {})
    base["budget"] = budget
    await state.update_data(base_answers=base)

    await go_to_next_service_block(message, state)
