from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.utils import go_to_next_service_block


router = Router(name="order_logo")


@router.message(OrderStates.Logo_Idea)
async def logo_idea(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("logo", {})["idea"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üé® –í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –ª—é–∫—Å, –∏–≥—Ä–∏–≤—ã–π, —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π –∏ —Ç.–¥."
    )
    await state.set_state(OrderStates.Logo_Style)


@router.message(OrderStates.Logo_Style)
async def logo_style(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("logo", {})["style"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(
        "üåà –ï—Å—Ç—å –ª–∏ —Ü–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç –ª—É—á—à–µ –∏—Å–∫–ª—é—á–∏—Ç—å?")
    await state.set_state(OrderStates.Logo_Colors)


@router.message(OrderStates.Logo_Colors)
async def logo_colors(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç–∞
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("logo", {})["colors"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(
        "üñ® –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –≤ –ø–µ—á–∞—Ç–∏?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–∏–∑–∏—Ç–∫–∏, —É–ø–∞–∫–æ–≤–∫–∞, –±–∞–Ω–Ω–µ—Ä—ã, –º–µ—Ä—á"
    )
    await state.set_state(OrderStates.Logo_Print)


@router.message(OrderStates.Logo_Print)
async def logo_print(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("logo", {})["print"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã
    await message.answer(
        "üîó –ï—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã? –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã.\n\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª."
    )
    await state.set_state(OrderStates.Logo_Refs)


@router.message(OrderStates.Logo_Refs)
async def logo_refs(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("logo", {})["refs"] = (message.text or "").strip()

    completed = set(data.get("completed_blocks", set()))
    completed.add("logo")

    await state.update_data(details=details, completed_blocks=completed)
    await go_to_next_service_block(message, state)
