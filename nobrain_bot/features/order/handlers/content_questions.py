from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.utils import go_to_next_service_block


router = Router(name="order_content")


@router.message(OrderStates.Content_Type)
async def content_type(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –û–ë–©–ï–ï –æ–ø–∏—Å–∞–Ω–∏–µ: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("content", {})["type"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí –ø–ª–æ—â–∞–¥–∫–∞
    await message.answer(
        "üìç –î–ª—è –∫–∞–∫–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Telegram, Instagram, —Å–∞–π—Ç, VK, YouTube"
    )
    await state.set_state(OrderStates.Content_Platform)


@router.message(OrderStates.Content_Platform)
async def content_platform(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–æ—â–∞–¥–∫—É
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("content", {})["platform"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí —Å—Ç–∏–ª—å/–ø–æ–¥–∞—á–∞
    await message.answer(
        "üë©‚Äçüíª –í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ –∏–ª–∏ –ø–æ–¥–∞—á–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ, –¥–µ—Ä–∑–∫–æ, ¬´–ª—é–∫—Å¬ª, —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ –∏ —Ç.–¥."
    )
    await state.set_state(OrderStates.Content_Style)


@router.message(OrderStates.Content_Style)
async def content_style(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å/–ø–æ–¥–∞—á—É
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("content", {})["style"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã
    await message.answer(
        "üîó –ï—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –∏–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã, –Ω–∞ —á—å–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–æ–∏—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è?\n\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª."
    )
    await state.set_state(OrderStates.Content_Refs)


@router.message(OrderStates.Content_Refs)
async def content_refs(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ç–∫—É
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("content", {})["refs"] = (message.text or "").strip()

    completed = set(data.get("completed_blocks", set()))
    completed.add("content")

    await state.update_data(details=details, completed_blocks=completed)
    await go_to_next_service_block(message, state)
