
================================================================================
–§–∞–π–ª: nobrain_bot\app.py
================================================================================
import asyncio
from aiogram import Bot, Dispatcher
from core.config import get_settings
from nobrain_bot.core.routers import setup_routers


async def main():
    config = get_settings()
    bot = Bot(token=config.bot_token)

    dp = Dispatcher()
    dp.include_router(setup_routers())

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

================================================================================
–§–∞–π–ª: nobrain_bot\__init__.py
================================================================================


================================================================================
–§–∞–π–ª: nobrain_bot\core\config.py
================================================================================
from dataclasses import dataclass
from dotenv import load_dotenv
import os


load_dotenv()


@dataclass
class Settings:
    bot_token: str
    admin_id: int
    site_url: str
    blog_url: str
    manager_url: str
    database_url: str


def get_settings() -> Settings:
    return Settings(
        bot_token=os.getenv("BOT_TOKEN", ""),
        admin_id=int(os.getenv("ADMIN_ID", "0")),
        site_url=os.getenv("SITE_URL", ""),
        blog_url=os.getenv("BLOG_URL", ""),
        manager_url=os.getenv("MANAGER_URL", ""),
        database_url=os.getenv(
            "DATABASE_URL",
            "postgresql+asyncpg://postgres:postgres@localhost:5432/nobrain"
        ),
    )


================================================================================
–§–∞–π–ª: nobrain_bot\core\routers.py
================================================================================
from aiogram import Router

from nobrain_bot.features.common.handlers.start_bot import router as start
from nobrain_bot.features.common.handlers.fallback import router as fallback
from nobrain_bot.features.common.handlers.links import router as links

# order handlers
from nobrain_bot.features.order.handlers.start_order import router as order_start
from nobrain_bot.features.order.handlers.base_questions import router as order_base
from nobrain_bot.features.order.handlers.logo_questions import router as order_logo
from nobrain_bot.features.order.handlers.site_questions import router as order_site
from nobrain_bot.features.order.handlers.bot_questions import router as order_bot
from nobrain_bot.features.order.handlers.content_questions import router as order_content
from nobrain_bot.features.order.handlers.finalize_order import router as order_finalize
from nobrain_bot.features.order.handlers.admin_decision import router as admin_orders


ALL_ROUTERS: tuple[Router, ...] = (
    start,
    links,

    order_start,
    order_base,
    order_logo,
    order_site,
    order_bot,
    order_content,
    order_finalize,
    admin_orders,

    fallback
)


def setup_routers() -> Router:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π Router –∏ –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
    """
    root = Router(name="root")
    for r in ALL_ROUTERS:
        root.include_router(r)
    return root


================================================================================
–§–∞–π–ª: nobrain_bot\database\models.py
================================================================================
from datetime import datetime
from sqlalchemy import String, Text, DateTime, JSON, BigInteger, Integer
from sqlalchemy.orm import Mapped, mapped_column
from nobrain_bot.database.session import Base


class Order(Base):
    __tablename__ = "orders"

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞—è–≤–∫–∏
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)

    # Telegram ID –∫–ª–∏–µ–Ω—Ç–∞
    tg_user_id: Mapped[int] = mapped_column(BigInteger, index=True, nullable=False)

    # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥ ‚Äî ["logo", "site", "bot", "content"]
    services: Mapped[list[str]] = mapped_column(JSON, nullable=False)

    # –ë–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (about, audience, goal, timing, budget)
    base_answers: Mapped[dict] = mapped_column(JSON, nullable=False)

    # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–µ (logo/site/bot/content)
    details: Mapped[dict] = mapped_column(JSON, nullable=False)

    # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: pending / accepted / declined
    status: Mapped[str] = mapped_column(String(20), default="pending", index=True)

    # –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ (–µ—Å–ª–∏ declined)
    decline_reason: Mapped[str | None] = mapped_column(Text)

    # –î–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    start_date: Mapped[datetime | None] = mapped_column(DateTime)
    end_date: Mapped[datetime | None] = mapped_column(DateTime)

    # –¢–∞–π–º—Å—Ç–µ–º–ø—ã
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


================================================================================
–§–∞–π–ª: nobrain_bot\database\session.py
================================================================================
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from nobrain_bot.core.config import get_settings

settings = get_settings()

engine = create_async_engine(settings.database_url, echo=False)

async_session = sessionmaker[AsyncSession](
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

Base = declarative_base()


================================================================================
–§–∞–π–ª: nobrain_bot\database\__init__.py
================================================================================


================================================================================
–§–∞–π–ª: nobrain_bot\database\CRUD\order_crud.py
================================================================================
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from nobrain_bot.database.models import Order


# —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
async def create_order(session: AsyncSession, tg_user_id, services, base_answers, details):
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å. status = pending –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    order = Order(
        tg_user_id=tg_user_id,
        services=services,
        base_answers=base_answers,
        details=details,
    )
    session.add(order)
    await session.commit()
    await session.refresh(order)
    return order


# –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ id
async def get_order_by_id(session: AsyncSession, order_id):
    result = await session.execute(select(Order).where(Order.id == order_id))
    return result.scalar_one_or_none()


# –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–∞—Ç—ã / –ø—Ä–∏—á–∏–Ω—É)
async def update_order_status(session: AsyncSession, order_id, status, start_date=None, end_date=None, decline_reason=None):
    result = await session.execute(select(Order).where(Order.id == order_id))
    order = result.scalar_one_or_none()
    if not order:
        return None

    order.status = status
    if start_date is not None:
        order.start_date = start_date
    if end_date is not None:
        order.end_date = end_date
    if decline_reason is not None:
        order.decline_reason = decline_reason

    await session.commit()
    await session.refresh(order)
    return order


# –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_orders_by_user(session: AsyncSession, tg_user_id):
    result = await session.execute(
        select(Order).where(Order.tg_user_id == tg_user_id).order_by(Order.created_at.desc())
    )
    return result.scalars().all()


================================================================================
–§–∞–π–ª: nobrain_bot\features\temp_handler.py
================================================================================
from aiogram import F, Router
from aiogram.types import Message

router = Router(name='temp_router')

@router.message(F.video)
async def get_video_id(message: Message):
    await message.answer(f"ID video: {message.video.file_id}")

================================================================================
–§–∞–π–ª: nobrain_bot\features\common\texts.py
================================================================================
def welcome(name: str) -> str:
    return (
        f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {name}! ‚úåÔ∏è\n\n"
        "–í—ã –≤ –±–æ—Ç–µ üß† `nobrain_production`\n\n"
        "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì\n\n"
        "–í—Å—ë —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )


ABOUT_TEXT = (
    "üß† `nobrain_production` ‚Äî —Å—Ç—É–¥–∏—è, –≥–¥–µ –∫—Ä–µ–∞—Ç–∏–≤ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏.\n\n"
    "–ú—ã —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç—ã üõç: Telegram-–±–æ—Ç—ã, –ª–æ–≥–æ—Ç–∏–ø—ã, —Ç–µ–∫—Å—Ç—ã, —Å–∞–π—Ç—ã-–≤–∏–∑–∏—Ç–∫–∏.\n\n"
    "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—Å –∏ –Ω–∞—à–∏—Ö –∫–µ–π—Å–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ üëá"
)

BLOG_TEXT = (
    "üì≤ –ó–∞—á–µ–º –±–∏–∑–Ω–µ—Å—É –≤ Telegram?\n"
    "üé® –ö–∞–∫ —Å—Ç–∏–ª—å –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–∏?\n"
    "‚úçÔ∏è –ü–æ—á–µ–º—É —Ç–µ–∫—Å—Ç —Ä–µ—à–∞–µ—Ç?\n\n"
    "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –≤ –Ω–∞—à–µ–º –±–ª–æ–≥–µ üëá"
)

MANAGER_TEXT = "–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å‚ùì\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ üëá"




================================================================================
–§–∞–π–ª: nobrain_bot\features\common\handlers\fallback.py
================================================================================
from aiogram import Router
from aiogram.types import Message

from nobrain_bot.features.common.keyboards.main_menu import main_menu_kb

router = Router(name="fallback")


@router.message()
async def fallback(message: Message):
    await message.answer(
        text=(
            "üòï –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
        ),
        reply_markup=main_menu_kb()
    )


================================================================================
–§–∞–π–ª: nobrain_bot\features\common\handlers\links.py
================================================================================
from aiogram import Router, F
from aiogram.types import Message
from nobrain_bot.core.config import get_settings
from nobrain_bot.features.common.keyboards.links import about_kb, blog_kb, manager_kb
from nobrain_bot.features.common.texts import ABOUT_TEXT, BLOG_TEXT, MANAGER_TEXT


router = Router(name="links")


@router.message(F.text == "üß† –ß—Ç–æ —Ç–∞–∫–æ–µ nobrain_production?")
async def about_handler(message: Message):
    config = get_settings()
    await message.answer(text=ABOUT_TEXT, reply_markup=about_kb(config), parse_mode='Markdown')


@router.message(F.text == "üì∞ –ù–∞—à –±–ª–æ–≥")
async def blog_handler(message: Message):
    config = get_settings()
    await message.answer(text=BLOG_TEXT, reply_markup=blog_kb(config))


@router.message(F.text == "üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def manager_handler(message: Message):
    config = get_settings()
    await message.answer(text=MANAGER_TEXT, reply_markup=manager_kb(config))

================================================================================
–§–∞–π–ª: nobrain_bot\features\common\handlers\start_bot.py
================================================================================
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message

from nobrain_bot.features.common.texts import welcome
from nobrain_bot.features.common.keyboards.main_menu import main_menu_kb


router = Router(name="start")


@router.message(F.text == '/start')
async def cmd_start(message: Message):
    await message.answer(text=welcome(message.from_user.first_name), parse_mode='Markdown', reply_markup=main_menu_kb())

================================================================================
–§–∞–π–ª: nobrain_bot\features\common\keyboards\links.py
================================================================================
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def about_kb(config) -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=config.site_url)]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def blog_kb(config) -> InlineKeyboardMarkup:
    kb = [
          [InlineKeyboardButton(text="üìñ –û—Ç–∫—Ä—ã—Ç—å –±–ª–æ–≥", url=config.blog_url)]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def manager_kb(config) -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="üì± –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=config.manager_url)]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


================================================================================
–§–∞–π–ª: nobrain_bot\features\common\keyboards\main_menu.py
================================================================================
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup


def main_menu_kb() -> ReplyKeyboardMarkup:
    kb = [
        [KeyboardButton(text="üß† –ß—Ç–æ —Ç–∞–∫–æ–µ nobrain_production?")],
        [KeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")],
        [ KeyboardButton(text="üì∞ –ù–∞—à –±–ª–æ–≥")]
    ]
    return ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\states.py
================================================================================
from aiogram.fsm.state import StatesGroup, State


class OrderStates(StatesGroup):
    # –í—ã–±–æ—Ä —É—Å–ª—É–≥
    ChoosingServices = State()

    # ===== BASE =====
    Base_About = State()
    Base_Audience = State()
    Base_Goal = State()
    Base_Timing = State()
    Base_Budget = State()

    # ===== LOGO =====
    # –õ–æ–≥–∏–∫–∞: —Å—Ç–∏–ª—å ‚Üí —Ü–≤–µ—Ç–∞ ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ‚Üí —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã ‚Üí –ì–æ—Ç–æ–≤–æ
    Logo_Idea = State()
    Logo_Style = State()
    Logo_Colors = State()
    Logo_Print = State()
    Logo_Refs = State()

    # ===== SITE =====
    # –õ–æ–≥–∏–∫–∞: –æ–±—â–∞—è –∏–¥–µ—è ‚Üí –±–ª–æ–∫–∏ ‚Üí —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ‚Üí –∫–æ–Ω—Ç–µ–Ω—Ç ‚Üí —Å—Ç–∏–ª—å ‚Üí —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã ‚Üí –ì–æ—Ç–æ–≤–æ
    Site_Idea = State()
    Site_Blocks = State()
    Site_Functionality = State()
    Site_Content = State()
    Site_Style = State()
    Site_Refs = State()

    # ===== BOT =====
    # –õ–æ–≥–∏–∫–∞: —Ç–∏–ø/–∑–∞–¥–∞—á–∞ ‚Üí —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ‚Üí –æ–ø–ª–∞—Ç–∞ ‚Üí —Ä–æ–ª–∏ ‚Üí –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã ‚Üí –ì–æ—Ç–æ–≤–æ
    Bot_Type = State()
    Bot_Functionality = State()
    Bot_Payment = State()
    Bot_Notifications = State()
    Bot_Integrations = State()
    Bot_Refs = State()

    # ===== CONTENT =====
    # –õ–æ–≥–∏–∫–∞: —á—Ç–æ –Ω—É–∂–Ω–æ ‚Üí –ø–ª–æ—â–∞–¥–∫–∞ ‚Üí —Å—Ç–∏–ª—å/–ø–æ–¥–∞—á–∞ ‚Üí —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã ‚Üí –ì–æ—Ç–æ–≤–æ
    Content_Type = State()
    Content_Platform = State()
    Content_Style = State()
    Content_Refs = State()

    # –§–∏–Ω–∞–ª
    Final = State()


# ===== –†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É =====
class DeclineStates(StatesGroup):
    WaitingReason = State()   # –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞


class EditStates(StatesGroup):
    WaitingDates = State()    # –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ä–æ–∫–æ–≤
    WaitingBudget = State()   # –æ–∂–∏–¥–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞

================================================================================
–§–∞–π–ª: nobrain_bot\features\order\texts.py
================================================================================


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\utils.py
================================================================================
from nobrain_bot.features.order.states import OrderStates


async def go_to_next_service_block(message, state):
    # –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
    data = await state.get_data()
    selected = list(data.get("selected_services", []))
    completed = set(data.get("completed_blocks", set()))

    # –∏—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ç–∫—É, –∫–æ—Ç–æ—Ä—É—é –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏
    next_key = None
    for key in selected:
        if key not in completed:
            next_key = key
            break

    # –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ–π–¥–µ–Ω–æ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –∏ —É—Ö–æ–¥–∏–º –≤ Final (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –¥–µ–ª–∞–µ—Ç finalize-—Ö–µ–Ω–¥–ª–µ—Ä)
    if next_key is None:
        await state.set_state(OrderStates.Final)
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É\n"
            "–ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!")
        return

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–µ—Ç–∫–∏
    if next_key == "logo":
        await state.set_state(OrderStates.Logo_Idea)
        await message.answer("üñåÔ∏è –û–ø–∏—à–∏—Ç–µ –æ–±—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –≤–∞—à –ª–æ–≥–æ—Ç–∏–ø:")
    elif next_key == "site":
        await state.set_state(OrderStates.Site_Idea)
        await message.answer("üåê –û–±—ä—è—Å–Ω–∏—Ç–µ –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö, –∫–∞–∫–∞—è –∏–¥–µ—è/–∑–∞–º—ã—Å–µ–ª —Å–∞–π—Ç–∞:")
    elif next_key == "bot":
        await state.set_state(OrderStates.Bot_Type)
        await message.answer("ü§ñ –î–∞–π—Ç–µ –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞–∫–æ–π —Ç–∏–ø –±–æ—Ç–∞ –Ω—É–∂–µ–Ω –∏ –∫–∞–∫–∞—è —É –Ω–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞:")
    elif next_key == "content":
        await state.set_state(OrderStates.Content_Type)
        await message.answer("‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞–º –Ω—É–∂–µ–Ω:")


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\handlers\admin_decision.py
================================================================================
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.database.session import async_session
from nobrain_bot.database.CRUD.order_crud import update_order_status, get_order_by_id
from nobrain_bot.core.config import get_settings
from nobrain_bot.features.order.states import DeclineStates, EditStates

router = Router(name="admin_orders")
config = get_settings()


# ‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data.startswith("accept:"))
async def accept_order(callback: CallbackQuery, bot: Bot):
    order_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        order = await update_order_status(session, order_id, status="accepted")

    await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç.")
    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await bot.send_message(order.tg_user_id, f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç ‚úÖ.\n–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è!")


# ‚ùå –û—Ç–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data.startswith("decline:"))
async def decline_order_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id)
    await callback.message.answer("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
    await state.set_state(DeclineStates.WaitingReason)


@router.message(F.text, DeclineStates.WaitingReason)
async def decline_order_finish(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    order_id = data["order_id"]
    reason = message.text.strip()

    async with async_session() as session:
        order = await update_order_status(session, order_id, status="declined", decline_reason=reason)

    await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await bot.send_message(order.tg_user_id, f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    await state.clear()


# ‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
@router.callback_query(F.data.startswith("edit:"))
async def edit_order_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.update_data(order_id=order_id)
    await callback.message.answer("üìÖ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ä–æ–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å—Ç–∞—Ä—Ç ‚Äî –∫–æ–Ω–µ—Ü):")
    await state.set_state(EditStates.WaitingDates)


@router.message(F.text, EditStates.WaitingDates)
async def edit_order_dates(message: Message, state: FSMContext):
    await state.update_data(dates=message.text.strip())
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:")
    await state.set_state(EditStates.WaitingBudget)


@router.message(F.text, EditStates.WaitingBudget)
async def edit_order_budget(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    order_id = data["order_id"]
    dates = data["dates"]
    budget = message.text.strip()

    async with async_session() as session:
        order = await get_order_by_id(session, order_id)  # –ø–æ–∫–∞ —Å—Ç–∞—Ç—É—Å pending
    # –∫–ª–∏–µ–Ω—Ç—É —É—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
    await bot.send_message(
        order.tg_user_id,
        f"üìë –ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É #{order_id}:\n"
        f"–°—Ä–æ–∫–∏: {dates}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {budget}\n\n"
        "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã?",
    )
    await message.answer(f"‚úèÔ∏è –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")
    await state.clear()


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\handlers\base_questions.py
================================================================================
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.utils import go_to_next_service_block


router = Router(name="order_base")


@router.message(OrderStates.Base_About)
async def base_about(message: Message, state: FSMContext):
    data = await state.get_data()
    base = data.get("base_answers", {})
    base["about"] = message.text.strip()
    await state.update_data(base_answers=base)
    await message.answer("üë• –ö—Ç–æ –≤–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?")
    await state.set_state(OrderStates.Base_Audience)


@router.message(OrderStates.Base_Audience)
async def base_audience(message: Message, state: FSMContext):
    data = await state.get_data()
    base = data.get("base_answers", {})
    base["audience"] = message.text.strip()
    await state.update_data(base_answers=base)
    await message.answer("üéØ –ö–∞–∫–∞—è —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞?")
    await state.set_state(OrderStates.Base_Goal)


@router.message(OrderStates.Base_Goal)
async def base_goal(message: Message, state: FSMContext):
    data = await state.get_data()
    base = data.get("base_answers", {})
    base["goal"] = message.text.strip()
    await state.update_data(base_answers=base)
    await message.answer("‚è± –°—Ä–æ–∫–∏: –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç?")
    await state.set_state(OrderStates.Base_Timing)


@router.message(OrderStates.Base_Timing)
async def base_timing(message: Message, state: FSMContext):
    data = await state.get_data()
    base = data.get("base_answers", {})
    base["timing"] = message.text.strip()
    await state.update_data(base_answers=base)
    await message.answer("üí∞ –ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?")
    await state.set_state(OrderStates.Base_Budget)


@router.message(OrderStates.Base_Budget)
async def base_budget(message: Message, state: FSMContext):
    data = await state.get_data()
    base = data.get("base_answers", {})
    base["budget"] = message.text.strip()
    await state.update_data(base_answers=base)
    await go_to_next_service_block(message, state)


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\handlers\bot_questions.py
================================================================================
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.utils import go_to_next_service_block

router = Router(name="order_bot")


@router.message(OrderStates.Bot_Type)
async def bot_type(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["type"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "‚öôÔ∏è –î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –±–æ—Ç? –ß—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –¥–µ–ª–∞—Ç—å?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã, –≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏"
    )
    await state.set_state(OrderStates.Bot_Functionality)


@router.message(OrderStates.Bot_Functionality)
async def bot_functionality(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["functionality"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üí≥ –ù—É–∂–Ω–æ –ª–∏, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–ª –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É?\n\n"
        "–ï—Å–ª–∏ –¥–∞ ‚Äî —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —É–¥–æ–±–Ω–æ (–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞, YooKassa, –°–ë–ü –∏ —Ç.–¥.)."
    )
    await state.set_state(OrderStates.Bot_Payment)


@router.message(OrderStates.Bot_Payment)
async def bot_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["payment"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üì© –ö—É–¥–∞ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞—è–≤–∫–∏ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –±–æ—Ç–∞?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ç–æ–ª—å–∫–æ –≤–∞–º, –≤ –æ–±—â–∏–π —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã, —Ä–∞–∑–Ω—ã–º –ª—é–¥—è–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–æ–≤—Å–µ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    await state.set_state(OrderStates.Bot_Notifications)


@router.message(OrderStates.Bot_Notifications)
async def bot_notifications(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["access"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üîó –ù—É–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç –∫ —á–µ–º—É-—Ç–æ –µ—â—ë?\n\n"
        "CRM, Google Sheets, —Ä–∞—Å—Å—ã–ª–∫–∏, —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Ç.–¥."
    )
    await state.set_state(OrderStates.Bot_Integrations)


@router.message(OrderStates.Bot_Integrations)
async def bot_integrations(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["integrations"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üì∑ –ï—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è? –ú–æ–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.\n\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'."
    )
    await state.set_state(OrderStates.Bot_Refs)


@router.message(OrderStates.Bot_Refs)
async def bot_refs(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("bot", {})["refs"] = (message.text or "").strip()

    completed = set(data.get("completed_blocks", set()))
    completed.add("bot")

    await state.update_data(details=details, completed_blocks=completed)
    await go_to_next_service_block(message, state)


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\handlers\content_questions.py
================================================================================
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.utils import go_to_next_service_block


router = Router(name="order_content")


@router.message(OrderStates.Content_Type)
async def content_type(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –û–ë–©–ï–ï –æ–ø–∏—Å–∞–Ω–∏–µ: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("content", {})["type"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí –ø–ª–æ—â–∞–¥–∫–∞
    await message.answer(
        "üìç –î–ª—è –∫–∞–∫–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Telegram, Instagram, —Å–∞–π—Ç, VK, YouTube"
    )
    await state.set_state(OrderStates.Content_Platform)


@router.message(OrderStates.Content_Platform)
async def content_platform(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–æ—â–∞–¥–∫—É
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("content", {})["platform"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí —Å—Ç–∏–ª—å/–ø–æ–¥–∞—á–∞
    await message.answer(
        "üë©‚Äçüíª –í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ –∏–ª–∏ –ø–æ–¥–∞—á–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ, –¥–µ—Ä–∑–∫–æ, ¬´–ª—é–∫—Å¬ª, —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ –∏ —Ç.–¥."
    )
    await state.set_state(OrderStates.Content_Style)


@router.message(OrderStates.Content_Style)
async def content_style(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å/–ø–æ–¥–∞—á—É
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("content", {})["style"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã
    await message.answer(
        "üîó –ï—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –∏–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã, –Ω–∞ —á—å–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–æ–∏—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è?\n\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª."
    )
    await state.set_state(OrderStates.Content_Refs)


@router.message(OrderStates.Content_Refs)
async def content_refs(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ç–∫—É
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("content", {})["refs"] = (message.text or "").strip()

    completed = set(data.get("completed_blocks", set()))
    completed.add("content")

    await state.update_data(details=details, completed_blocks=completed)
    await go_to_next_service_block(message, state)


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\handlers\finalize_order.py
================================================================================
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.database.session import async_session
from nobrain_bot.database.CRUD.order_crud import create_order
from nobrain_bot.core.config import get_settings
from aiogram import Bot

from nobrain_bot.features.order.keyboards.admin_decision import decision_kb
from nobrain_bot.features.order.states import OrderStates

router = Router(name="order_finalize")


@router.message(OrderStates.Final)
async def finalize_order(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with async_session() as session:
        order = await create_order(
            session=session,
            tg_user_id=message.from_user.id,
            services=list(data.get("selected_services", [])),
            base_answers=data.get("base_answers", {}),
            details=data.get("details", {})
        )

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
    text = "üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
    text += f"üë§ –ö–ª–∏–µ–Ω—Ç: @{message.from_user.username or message.from_user.id}\n"
    text += f"üÜî Order ID: {order.id}\n"
    text += f"üõ† –£—Å–ª—É–≥–∏: {', '.join(data.get('selected_services', []))}\n\n"

    base = data.get("base_answers", {})
    if base:
        text += "üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        for key, value in base.items():
            text += f"‚Äî {key}: {value}\n"
        text += "\n"

    details = data.get("details", {})
    for block, answers in details.items():
        text += f"üîπ {block.upper()}:\n"
        for k, v in answers.items():
            text += f"  ‚Ä¢ {k}: {v}\n"
        text += "\n"

    config = get_settings()

    try:
        await bot.send_message(config.admin_id, text=text, reply_markup=decision_kb(order.id))
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {config.admin_id}: {e}")

    await state.clear()


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\handlers\logo_questions.py
================================================================================
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.utils import go_to_next_service_block


router = Router(name="order_logo")


@router.message(OrderStates.Logo_Idea)
async def logo_idea(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("logo", {})["idea"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üé® –í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –ª—é–∫—Å, –∏–≥—Ä–∏–≤—ã–π, —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π –∏ —Ç.–¥."
    )
    await state.set_state(OrderStates.Logo_Style)


@router.message(OrderStates.Logo_Style)
async def logo_style(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("logo", {})["style"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(
        "üåà –ï—Å—Ç—å –ª–∏ —Ü–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç –ª—É—á—à–µ –∏—Å–∫–ª—é—á–∏—Ç—å?")
    await state.set_state(OrderStates.Logo_Colors)


@router.message(OrderStates.Logo_Colors)
async def logo_colors(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç–∞
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("logo", {})["colors"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(
        "üñ® –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –≤ –ø–µ—á–∞—Ç–∏?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–∏–∑–∏—Ç–∫–∏, —É–ø–∞–∫–æ–≤–∫–∞, –±–∞–Ω–Ω–µ—Ä—ã, –º–µ—Ä—á"
    )
    await state.set_state(OrderStates.Logo_Print)


@router.message(OrderStates.Logo_Print)
async def logo_print(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("logo", {})["print"] = (message.text or "").strip()
    await state.update_data(details=details)

    # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Üí —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã
    await message.answer(
        "üîó –ï—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã? –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã.\n\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª."
    )
    await state.set_state(OrderStates.Logo_Refs)


@router.message(OrderStates.Logo_Refs)
async def logo_refs(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("logo", {})["refs"] = (message.text or "").strip()

    completed = set(data.get("completed_blocks", set()))
    completed.add("logo")

    await state.update_data(details=details, completed_blocks=completed)
    await go_to_next_service_block(message, state)


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\handlers\site_questions.py
================================================================================
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.utils import go_to_next_service_block


router = Router(name="order_site")


@router.message(OrderStates.Site_Idea)
async def site_idea(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("site", {})["idea"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üì¶ –ö–∞–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–û –∫–æ–º–ø–∞–Ω–∏–∏¬ª, ¬´–£—Å–ª—É–≥–∏¬ª, ¬´–û—Ç–∑—ã–≤—ã¬ª, ¬´–ö–æ–Ω—Ç–∞–∫—Ç—ã¬ª"
    )
    await state.set_state(OrderStates.Site_Blocks)


@router.message(OrderStates.Site_Blocks)
async def site_blocks(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("site", {})["blocks"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "‚öôÔ∏è –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–∞–π—Ç?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω, –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É, –Ω–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp/Telegram"
    )
    await state.set_state(OrderStates.Site_Functionality)


@router.message(OrderStates.Site_Functionality)
async def site_functionality(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("site", {})["functionality"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer("üìë –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Å–∞–π—Ç–∞ –∏–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤—Å—ë —Å –Ω—É–ª—è?")
    await state.set_state(OrderStates.Site_Content)


@router.message(OrderStates.Site_Content)
async def site_content(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("site", {})["content"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üé® –í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∞–π—Ç?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, —Å—Ç—Ä–æ–≥–∏–π, —è—Ä–∫–∏–π, ¬´–ª—é–∫—Å¬ª –∏ —Ç.–¥."
    )
    await state.set_state(OrderStates.Site_Style)


@router.message(OrderStates.Site_Style)
async def site_style(message: Message, state: FSMContext):
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("site", {})["style"] = (message.text or "").strip()
    await state.update_data(details=details)

    await message.answer(
        "üîó –ï—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã? –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã.\n\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª."
    )
    await state.set_state(OrderStates.Site_Refs)


@router.message(OrderStates.Site_Refs)
async def site_refs(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ç–∫—É
    data = await state.get_data()
    details = data.get("details", {})
    details.setdefault("site", {})["refs"] = (message.text or "").strip()

    completed = set(data.get("completed_blocks", set()))
    completed.add("site")

    await state.update_data(details=details, completed_blocks=completed)
    await go_to_next_service_block(message, state)


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\handlers\start_order.py
================================================================================
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from nobrain_bot.features.order.states import OrderStates
from nobrain_bot.features.order.keyboards.services import services_kb


router = Router(name="order_start")


@router.message(F.text == 'üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def start_order(message: Message, state: FSMContext):
    # –æ—á–∏—â–∞–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    await state.clear()
    await state.update_data(
        selected_services=set(),
        base_answers={},
        details={},
        completed_blocks=set()
    )
    await message.answer(
        "üìù –î–∞–≤–∞–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª—É–≥:",
        reply_markup=services_kb(set())
    )
    await state.set_state(OrderStates.ChoosingServices)


@router.callback_query(F.data.startswith("service:"), OrderStates.ChoosingServices)
async def choose_services(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = set(data.get("selected_services", set()))
    _, payload = callback.data.split(":", 1)

    if payload == "continue":
        if not selected:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É", show_alert=True)
            return
        await callback.message.edit_text("üíº –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –≤–∫—Ä–∞—Ç—Ü–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ:")
        await state.set_state(OrderStates.Base_About)
        return

    if payload in selected:
        selected.remove(payload)
    else:
        selected.add(payload)
    await state.update_data(selected_services=selected)
    await callback.message.edit_reply_markup(reply_markup=services_kb(selected))
    await callback.answer()


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\keyboards\admin_decision.py
================================================================================
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def decision_kb(order_id: int) -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{order_id}"),
            InlineKeyboardButton(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data=f"edit:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline:{order_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


================================================================================
–§–∞–π–ª: nobrain_bot\features\order\keyboards\services.py
================================================================================
from aiogram.utils.keyboard import InlineKeyboardBuilder

SERVICES = {
    "bot": "–ë–æ—Ç",
    "logo": "–õ–æ–≥–æ—Ç–∏–ø",
    "site": "–°–∞–π—Ç",
    "content": "–ö–æ–Ω—Ç–µ–Ω—Ç"
}


def services_kb(selected_services):
    kb = InlineKeyboardBuilder()
    for key, title in SERVICES.items():
        mark = "‚úÖ" if key in selected_services else "‚¨ú"
        kb.button(text=f"{mark} {title}", callback_data=f"service:{key}")
    kb.button(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="service:continue")
    kb.adjust(1)
    return kb.as_markup()

